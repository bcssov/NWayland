using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.Wlr.WlrDataControlUnstableV1
{
    /// <summary>
    /// This interface is a manager that allows creating per-seat data devicecontrols.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwlrDataControlManagerV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwlrDataControlManagerV1()
        {
            NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlManagerV1.WlInterface = new WlInterface("zwlr_data_control_manager_v1", 2, new WlMessage[] {
                new WlMessage("create_data_source", "n", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlSourceV1.WlInterface) }),
                new WlMessage("get_data_device", "no", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlDeviceV1.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSeat.WlInterface) }),
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlManagerV1.WlInterface);
        }

        /// <summary>
        /// Create a new data source.<br/><br/>
        /// </summary>
        public NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlSourceV1 CreateDataSource()
        {
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 0, __args, ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlSourceV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlSourceV1(__ret, Version);
        }

        /// <summary>
        /// Create a data device that can be used to manage a seat's selection.<br/><br/>
        /// </summary>
        public NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlDeviceV1 GetDataDevice(NWayland.Protocols.Wayland.WlSeat @seat)
        {
            if (@seat == null)
                throw new ArgumentNullException("seat");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @seat
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 1, __args, ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlDeviceV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlDeviceV1(__ret, Version);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 2, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<ZwlrDataControlManagerV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlManagerV1.WlInterface);
            }

            public ZwlrDataControlManagerV1 Create(IntPtr handle, int version)
            {
                return new ZwlrDataControlManagerV1(handle, version);
            }
        }

        public static IBindFactory<ZwlrDataControlManagerV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwlr_data_control_manager_v1";
        public const int InterfaceVersion = 2;

        public ZwlrDataControlManagerV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// This interface allows a client to manage a seat's selection.<br/><br/>
    /// When the seat is destroyed, this object becomes inert.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwlrDataControlDeviceV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwlrDataControlDeviceV1()
        {
            NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlDeviceV1.WlInterface = new WlInterface("zwlr_data_control_device_v1", 2, new WlMessage[] {
                new WlMessage("set_selection", "?o", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlSourceV1.WlInterface) }),
                new WlMessage("destroy", "", new WlInterface*[] { }),
                new WlMessage("set_primary_selection", "2?o", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlSourceV1.WlInterface) })
            }, new WlMessage[] {
                new WlMessage("data_offer", "n", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlOfferV1.WlInterface) }),
                new WlMessage("selection", "?o", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlOfferV1.WlInterface) }),
                new WlMessage("finished", "", new WlInterface*[] { }),
                new WlMessage("primary_selection", "2?o", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlOfferV1.WlInterface) })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlDeviceV1.WlInterface);
        }

        /// <summary>
        /// This request asks the compositor to set the selection to the data fromthe source on behalf of the client.<br/><br/>
        /// The given source may not be used in any further set_selection orset_primary_selection requests. Attempting to use a previously usedsource is a protocol error.<br/><br/>
        /// To unset the selection, set the source to NULL.<br/><br/>
        /// </summary>
        public void SetSelection(NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlSourceV1? @source)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @source
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
            base.Dispose(true);
        }

        /// <summary>
        /// This request asks the compositor to set the primary selection to thedata from the source on behalf of the client.<br/><br/>
        /// The given source may not be used in any further set_selection orset_primary_selection requests. Attempting to use a previously usedsource is a protocol error.<br/><br/>
        /// To unset the primary selection, set the source to NULL.<br/><br/>
        /// The compositor will ignore this request if it does not support primaryselection.<br/><br/>
        /// </summary>
        public void SetPrimarySelection(NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlSourceV1? @source)
        {
            if (Version < 2)
                throw new InvalidOperationException("Request set_primary_selection is only supported since version 2");
            WlArgument* __args = stackalloc WlArgument[] {
                @source
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 2, __args);
        }

        public interface IEvents
        {
            /// <summary>
            /// The data_offer event introduces a new wlr_data_control_offer object,which will subsequently be used in either thewlr_data_control_device.selection event (for the regular clipboardselections) or the wlr_data_control_device.primary_selection event (forthe primary clipboard selections). Immediately following thewlr_data_control_device.data_offer event, the new data_offer objectwill send out wlr_data_control_offer.offer events to describe the MIMEtypes it offers.<br/><br/>
            /// </summary>
            void OnDataOffer(NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlDeviceV1 eventSender, ZwlrDataControlOfferV1 @id);

            /// <summary>
            /// The selection event is sent out to notify the client of a newwlr_data_control_offer for the selection for this device. Thewlr_data_control_device.data_offer and the wlr_data_control_offer.offerevents are sent out immediately before this event to introduce the dataoffer object. The selection event is sent to a client when a newselection is set. The wlr_data_control_offer is valid until a newwlr_data_control_offer or NULL is received. The client must destroy theprevious selection wlr_data_control_offer, if any, upon receiving thisevent.<br/><br/>
            /// The first selection event is sent upon binding thewlr_data_control_device object.<br/><br/>
            /// </summary>
            void OnSelection(NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlDeviceV1 eventSender, NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlOfferV1? @id);

            /// <summary>
            /// This data control object is no longer valid and should be destroyed bythe client.<br/><br/>
            /// </summary>
            void OnFinished(NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlDeviceV1 eventSender);

            /// <summary>
            /// The primary_selection event is sent out to notify the client of a newwlr_data_control_offer for the primary selection for this device. Thewlr_data_control_device.data_offer and the wlr_data_control_offer.offerevents are sent out immediately before this event to introduce the dataoffer object. The primary_selection event is sent to a client when anew primary selection is set. The wlr_data_control_offer is valid untila new wlr_data_control_offer or NULL is received. The client mustdestroy the previous primary selection wlr_data_control_offer, if any,upon receiving this event.<br/><br/>
            /// If the compositor supports primary selection, the firstprimary_selection event is sent upon binding thewlr_data_control_device object.<br/><br/>
            /// </summary>
            void OnPrimarySelection(NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlDeviceV1 eventSender, NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlOfferV1? @id);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnDataOffer(this, new ZwlrDataControlOfferV1(arguments[0].IntPtr, Version));
                    break;
                case 1:
                    Events?.OnSelection(this, WlProxy.FromNative<NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlOfferV1>(arguments[0].IntPtr));
                    break;
                case 2:
                    Events?.OnFinished(this);
                    break;
                case 3:
                    Events?.OnPrimarySelection(this, WlProxy.FromNative<NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlOfferV1>(arguments[0].IntPtr));
                    break;
            }
        }

        public enum ErrorEnum
        {
            /// <summary>
            /// source given to set_selection or set_primary_selection was already used before<br/><br/>
            /// </summary>
            UsedSource = 1
        }

        private class ProxyFactory : IBindFactory<ZwlrDataControlDeviceV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlDeviceV1.WlInterface);
            }

            public ZwlrDataControlDeviceV1 Create(IntPtr handle, int version)
            {
                return new ZwlrDataControlDeviceV1(handle, version);
            }
        }

        public static IBindFactory<ZwlrDataControlDeviceV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwlr_data_control_device_v1";
        public const int InterfaceVersion = 2;

        public ZwlrDataControlDeviceV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// The wlr_data_control_source object is the source side of awlr_data_control_offer. It is created by the source client in a datatransfer and provides a way to describe the offered data and a way torespond to requests to transfer the data.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwlrDataControlSourceV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwlrDataControlSourceV1()
        {
            NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlSourceV1.WlInterface = new WlInterface("zwlr_data_control_source_v1", 1, new WlMessage[] {
                new WlMessage("offer", "s", new WlInterface*[] { null }),
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("send", "sh", new WlInterface*[] { null, null }),
                new WlMessage("cancelled", "", new WlInterface*[] { })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlSourceV1.WlInterface);
        }

        /// <summary>
        /// This request adds a MIME type to the set of MIME types advertised totargets. Can be called several times to offer multiple types.<br/><br/>
        /// Calling this after wlr_data_control_device.set_selection is a protocolerror.<br/><br/>
        /// </summary>
        public void Offer(string @mimeType)
        {
            if (@mimeType == null)
                throw new ArgumentNullException("mimeType");
            using var __marshalled__mimeType = new NWaylandMarshalledString(@mimeType);
            WlArgument* __args = stackalloc WlArgument[] {
                __marshalled__mimeType
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            /// <summary>
            /// Request for data from the client. Send the data as the specified MIMEtype over the passed file descriptor, then close it.<br/><br/>
            /// </summary>
            void OnSend(NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlSourceV1 eventSender, string @mimeType, int @fd);

            /// <summary>
            /// This data source is no longer valid. The data source has been replacedby another data source.<br/><br/>
            /// The client should clean up and destroy this data source.<br/><br/>
            /// </summary>
            void OnCancelled(NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlSourceV1 eventSender);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnSend(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr), arguments[1].Int32);
                    break;
                case 1:
                    Events?.OnCancelled(this);
                    break;
            }
        }

        public enum ErrorEnum
        {
            /// <summary>
            /// offer sent after wlr_data_control_device.set_selection<br/><br/>
            /// </summary>
            InvalidOffer = 1
        }

        private class ProxyFactory : IBindFactory<ZwlrDataControlSourceV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlSourceV1.WlInterface);
            }

            public ZwlrDataControlSourceV1 Create(IntPtr handle, int version)
            {
                return new ZwlrDataControlSourceV1(handle, version);
            }
        }

        public static IBindFactory<ZwlrDataControlSourceV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwlr_data_control_source_v1";
        public const int InterfaceVersion = 1;

        public ZwlrDataControlSourceV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// A wlr_data_control_offer represents a piece of data offered for transferby another client (the source client). The offer describes the differentMIME types that the data can be converted to and provides the mechanismfor transferring the data directly from the source client.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwlrDataControlOfferV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwlrDataControlOfferV1()
        {
            NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlOfferV1.WlInterface = new WlInterface("zwlr_data_control_offer_v1", 1, new WlMessage[] {
                new WlMessage("receive", "sh", new WlInterface*[] { null, null }),
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("offer", "s", new WlInterface*[] { null })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlOfferV1.WlInterface);
        }

        /// <summary>
        /// To transfer the offered data, the client issues this request andindicates the MIME type it wants to receive. The transfer happensthrough the passed file descriptor (typically created with the pipesystem call). The source client writes the data in the MIME typerepresentation requested and then closes the file descriptor.<br/><br/>
        /// The receiving client reads from the read end of the pipe until EOF andthen closes its end, at which point the transfer is complete.<br/><br/>
        /// This request may happen multiple times for different MIME types.<br/><br/>
        /// </summary>
        public void Receive(string @mimeType, int @fd)
        {
            if (@mimeType == null)
                throw new ArgumentNullException("mimeType");
            using var __marshalled__mimeType = new NWaylandMarshalledString(@mimeType);
            WlArgument* __args = stackalloc WlArgument[] {
                __marshalled__mimeType,
                @fd
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            /// <summary>
            /// Sent immediately after creating the wlr_data_control_offer object.One event per offered MIME type.<br/><br/>
            /// </summary>
            void OnOffer(NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlOfferV1 eventSender, string @mimeType);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnOffer(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr));
                    break;
            }
        }

        private class ProxyFactory : IBindFactory<ZwlrDataControlOfferV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrDataControlUnstableV1.ZwlrDataControlOfferV1.WlInterface);
            }

            public ZwlrDataControlOfferV1 Create(IntPtr handle, int version)
            {
                return new ZwlrDataControlOfferV1(handle, version);
            }
        }

        public static IBindFactory<ZwlrDataControlOfferV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwlr_data_control_offer_v1";
        public const int InterfaceVersion = 1;

        public ZwlrDataControlOfferV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}