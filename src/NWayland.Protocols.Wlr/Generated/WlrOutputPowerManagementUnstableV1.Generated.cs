using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.Wlr.WlrOutputPowerManagementUnstableV1
{
    /// <summary>
    /// This interface is a manager that allows creating per-output powermanagement mode controls.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwlrOutputPowerManagerV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwlrOutputPowerManagerV1()
        {
            NWayland.Protocols.Wlr.WlrOutputPowerManagementUnstableV1.ZwlrOutputPowerManagerV1.WlInterface = new WlInterface("zwlr_output_power_manager_v1", 1, new WlMessage[] {
                new WlMessage("get_output_power", "no", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrOutputPowerManagementUnstableV1.ZwlrOutputPowerV1.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlOutput.WlInterface) }),
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrOutputPowerManagementUnstableV1.ZwlrOutputPowerManagerV1.WlInterface);
        }

        /// <summary>
        /// Create an output power management mode control that can be used toadjust the power management mode for a given output.<br/><br/>
        /// </summary>
        public NWayland.Protocols.Wlr.WlrOutputPowerManagementUnstableV1.ZwlrOutputPowerV1 GetOutputPower(NWayland.Protocols.Wayland.WlOutput @output)
        {
            if (@output == null)
                throw new ArgumentNullException("output");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @output
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 0, __args, ref NWayland.Protocols.Wlr.WlrOutputPowerManagementUnstableV1.ZwlrOutputPowerV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.Wlr.WlrOutputPowerManagementUnstableV1.ZwlrOutputPowerV1(__ret, Version);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<ZwlrOutputPowerManagerV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrOutputPowerManagementUnstableV1.ZwlrOutputPowerManagerV1.WlInterface);
            }

            public ZwlrOutputPowerManagerV1 Create(IntPtr handle, int version)
            {
                return new ZwlrOutputPowerManagerV1(handle, version);
            }
        }

        public static IBindFactory<ZwlrOutputPowerManagerV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwlr_output_power_manager_v1";
        public const int InterfaceVersion = 1;

        public ZwlrOutputPowerManagerV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// This object offers requests to set the power management mode ofan output.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwlrOutputPowerV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwlrOutputPowerV1()
        {
            NWayland.Protocols.Wlr.WlrOutputPowerManagementUnstableV1.ZwlrOutputPowerV1.WlInterface = new WlInterface("zwlr_output_power_v1", 1, new WlMessage[] {
                new WlMessage("set_mode", "u", new WlInterface*[] { null }),
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("mode", "u", new WlInterface*[] { null }),
                new WlMessage("failed", "", new WlInterface*[] { })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrOutputPowerManagementUnstableV1.ZwlrOutputPowerV1.WlInterface);
        }

        /// <summary>
        /// Set an output's power save mode to the given mode. The mode changeis effective immediately. If the output does not support the givenmode a failed event is sent.<br/><br/>
        /// </summary>
        public void SetMode(ModeEnum @mode)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                (uint)@mode
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            /// <summary>
            /// Report the power management mode change of an output.<br/><br/>
            /// The mode event is sent after an output changed its powermanagement mode. The reason can be a client using set_mode or thecompositor deciding to change an output's mode.This event is also sent immediately when the object is createdso the client is informed about the current power management mode.<br/><br/>
            /// </summary>
            void OnMode(NWayland.Protocols.Wlr.WlrOutputPowerManagementUnstableV1.ZwlrOutputPowerV1 eventSender, ModeEnum @mode);

            /// <summary>
            /// This event indicates that the output power management mode controlis no longer valid. This can happen for a number of reasons,including:- The output doesn't support power management- Another client already has exclusive power management mode controlfor this output- The output disappeared<br/><br/>
            /// Upon receiving this event, the client should destroy this object.<br/><br/>
            /// </summary>
            void OnFailed(NWayland.Protocols.Wlr.WlrOutputPowerManagementUnstableV1.ZwlrOutputPowerV1 eventSender);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnMode(this, (ModeEnum)arguments[0].UInt32);
                    break;
                case 1:
                    Events?.OnFailed(this);
                    break;
            }
        }

        public enum ModeEnum
        {
            /// <summary>
            /// Output is turned off.<br/><br/>
            /// </summary>
            Off = 0,
            /// <summary>
            /// Output is turned on, no power saving<br/><br/>
            /// </summary>
            On = 1
        }

        public enum ErrorEnum
        {
            /// <summary>
            /// nonexistent power save mode<br/><br/>
            /// </summary>
            InvalidMode = 1
        }

        private class ProxyFactory : IBindFactory<ZwlrOutputPowerV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrOutputPowerManagementUnstableV1.ZwlrOutputPowerV1.WlInterface);
            }

            public ZwlrOutputPowerV1 Create(IntPtr handle, int version)
            {
                return new ZwlrOutputPowerV1(handle, version);
            }
        }

        public static IBindFactory<ZwlrOutputPowerV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwlr_output_power_v1";
        public const int InterfaceVersion = 1;

        public ZwlrOutputPowerV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}