using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.Wlr.WlrVirtualPointerUnstableV1
{
    /// <summary>
    /// This protocol allows clients to emulate a physical pointer device. Therequests are mostly mirror opposites of those specified in wl_pointer.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwlrVirtualPointerV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwlrVirtualPointerV1()
        {
            NWayland.Protocols.Wlr.WlrVirtualPointerUnstableV1.ZwlrVirtualPointerV1.WlInterface = new WlInterface("zwlr_virtual_pointer_v1", 2, new WlMessage[] {
                new WlMessage("motion", "uff", new WlInterface*[] { null, null, null }),
                new WlMessage("motion_absolute", "uuuuu", new WlInterface*[] { null, null, null, null, null }),
                new WlMessage("button", "uuu", new WlInterface*[] { null, null, null }),
                new WlMessage("axis", "uuf", new WlInterface*[] { null, null, null }),
                new WlMessage("frame", "", new WlInterface*[] { }),
                new WlMessage("axis_source", "u", new WlInterface*[] { null }),
                new WlMessage("axis_stop", "uu", new WlInterface*[] { null, null }),
                new WlMessage("axis_discrete", "uufi", new WlInterface*[] { null, null, null, null }),
                new WlMessage("destroy", "1", new WlInterface*[] { })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrVirtualPointerUnstableV1.ZwlrVirtualPointerV1.WlInterface);
        }

        /// <summary>
        /// The pointer has moved by a relative amount to the previous request.<br/><br/>
        /// Values are in the global compositor space.<br/><br/>
        /// </summary>
        public void Motion(uint @time, WlFixed @dx, WlFixed @dy)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @time,
                @dx,
                @dy
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        /// <summary>
        /// The pointer has moved in an absolute coordinate frame.<br/><br/>
        /// Value of x can range from 0 to x_extent, value of y can range from 0to y_extent.<br/><br/>
        /// </summary>
        public void MotionAbsolute(uint @time, uint @x, uint @y, uint @xExtent, uint @yExtent)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @time,
                @x,
                @y,
                @xExtent,
                @yExtent
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
        }

        /// <summary>
        /// A button was pressed or released.<br/><br/>
        /// </summary>
        public void Button(uint @time, uint @button, NWayland.Protocols.Wayland.WlPointer.ButtonStateEnum @state)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @time,
                @button,
                (uint)@state
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 2, __args);
        }

        /// <summary>
        /// Scroll and other axis requests.<br/><br/>
        /// </summary>
        public void Axis(uint @time, NWayland.Protocols.Wayland.WlPointer.AxisEnum @axis, WlFixed @value)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @time,
                (uint)@axis,
                @value
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 3, __args);
        }

        /// <summary>
        /// Indicates the set of events that logically belong together.<br/><br/>
        /// </summary>
        public void Frame()
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 4, __args);
        }

        /// <summary>
        /// Source information for scroll and other axis.<br/><br/>
        /// </summary>
        public void AxisSource(NWayland.Protocols.Wayland.WlPointer.AxisSourceEnum @axisSource)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                (uint)@axisSource
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 5, __args);
        }

        /// <summary>
        /// Stop notification for scroll and other axes.<br/><br/>
        /// </summary>
        public void AxisStop(uint @time, NWayland.Protocols.Wayland.WlPointer.AxisEnum @axis)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @time,
                (uint)@axis
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 6, __args);
        }

        /// <summary>
        /// Discrete step information for scroll and other axes.<br/><br/>
        /// This event allows the client to extend data normally sent using the axisevent with discrete value.<br/><br/>
        /// </summary>
        public void AxisDiscrete(uint @time, NWayland.Protocols.Wayland.WlPointer.AxisEnum @axis, WlFixed @value, int @discrete)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @time,
                (uint)@axis,
                @value,
                @discrete
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 7, __args);
        }

        protected override void Dispose(bool disposing)
        {
            if (Version < 1)
                return;
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 8, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        public enum ErrorEnum
        {
            /// <summary>
            /// client sent invalid axis enumeration value<br/><br/>
            /// </summary>
            InvalidAxis = 0,
            /// <summary>
            /// client sent invalid axis source enumeration value<br/><br/>
            /// </summary>
            InvalidAxisSource = 1
        }

        private class ProxyFactory : IBindFactory<ZwlrVirtualPointerV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrVirtualPointerUnstableV1.ZwlrVirtualPointerV1.WlInterface);
            }

            public ZwlrVirtualPointerV1 Create(IntPtr handle, int version)
            {
                return new ZwlrVirtualPointerV1(handle, version);
            }
        }

        public static IBindFactory<ZwlrVirtualPointerV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwlr_virtual_pointer_v1";
        public const int InterfaceVersion = 2;

        public ZwlrVirtualPointerV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// This object allows clients to create individual virtual pointer objects.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwlrVirtualPointerManagerV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwlrVirtualPointerManagerV1()
        {
            NWayland.Protocols.Wlr.WlrVirtualPointerUnstableV1.ZwlrVirtualPointerManagerV1.WlInterface = new WlInterface("zwlr_virtual_pointer_manager_v1", 2, new WlMessage[] {
                new WlMessage("create_virtual_pointer", "?on", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSeat.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrVirtualPointerUnstableV1.ZwlrVirtualPointerV1.WlInterface) }),
                new WlMessage("destroy", "1", new WlInterface*[] { }),
                new WlMessage("create_virtual_pointer_with_output", "2?o?on", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSeat.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlOutput.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrVirtualPointerUnstableV1.ZwlrVirtualPointerV1.WlInterface) })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrVirtualPointerUnstableV1.ZwlrVirtualPointerManagerV1.WlInterface);
        }

        /// <summary>
        /// Creates a new virtual pointer. The optional seat is a suggestion to thecompositor.<br/><br/>
        /// </summary>
        public NWayland.Protocols.Wlr.WlrVirtualPointerUnstableV1.ZwlrVirtualPointerV1 CreateVirtualPointer(NWayland.Protocols.Wayland.WlSeat? @seat)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @seat,
                WlArgument.NewId
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 0, __args, ref NWayland.Protocols.Wlr.WlrVirtualPointerUnstableV1.ZwlrVirtualPointerV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.Wlr.WlrVirtualPointerUnstableV1.ZwlrVirtualPointerV1(__ret, Version);
        }

        protected override void Dispose(bool disposing)
        {
            if (Version < 1)
                return;
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
            base.Dispose(true);
        }

        /// <summary>
        /// Creates a new virtual pointer. The seat and the output arguments areoptional. If the seat argument is set, the compositor should assign theinput device to the requested seat. If the output argument is set, thecompositor should map the input device to the requested output.<br/><br/>
        /// </summary>
        public NWayland.Protocols.Wlr.WlrVirtualPointerUnstableV1.ZwlrVirtualPointerV1 CreateVirtualPointerWithOutput(NWayland.Protocols.Wayland.WlSeat? @seat, NWayland.Protocols.Wayland.WlOutput? @output)
        {
            if (Version < 2)
                throw new InvalidOperationException("Request create_virtual_pointer_with_output is only supported since version 2");
            WlArgument* __args = stackalloc WlArgument[] {
                @seat,
                @output,
                WlArgument.NewId
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 2, __args, ref NWayland.Protocols.Wlr.WlrVirtualPointerUnstableV1.ZwlrVirtualPointerV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.Wlr.WlrVirtualPointerUnstableV1.ZwlrVirtualPointerV1(__ret, Version);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<ZwlrVirtualPointerManagerV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wlr.WlrVirtualPointerUnstableV1.ZwlrVirtualPointerManagerV1.WlInterface);
            }

            public ZwlrVirtualPointerManagerV1 Create(IntPtr handle, int version)
            {
                return new ZwlrVirtualPointerManagerV1(handle, version);
            }
        }

        public static IBindFactory<ZwlrVirtualPointerManagerV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwlr_virtual_pointer_manager_v1";
        public const int InterfaceVersion = 2;

        public ZwlrVirtualPointerManagerV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}