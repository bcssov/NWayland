using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.Plasma.Text
{
    /// <summary>
    /// An object used for text input. Adds support for text input and inputmethods to applications. A text-input object is created from awl_text_input_manager and corresponds typically to a text entry in anapplication.Requests are used to activate/deactivate the text-input object and setstate information like surrounding and selected text or the content type.The information about entered text is sent to the text-input object viathe pre-edit and commit events. Using this interface removes the needfor applications to directly process hardware key events and compose textout of them.<br/><br/>
    /// Text is generally UTF-8 encoded, indices and lengths are in bytes.<br/><br/>
    /// Serials are used to synchronize the state between the text input andan input method. New serials are sent by the text input in thecommit_state request and are used by the input method to indicatethe known text input state in events like preedit_string, commit_string,and keysym. The text input can then ignore events from the input methodwhich are based on an outdated state (for example after a reset).<br/><br/>
    /// </summary>
    public sealed unsafe partial class WlTextInput : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static WlTextInput()
        {
            NWayland.Protocols.Plasma.Text.WlTextInput.WlInterface = new WlInterface("wl_text_input", 1, new WlMessage[] {
                new WlMessage("activate", "oo", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSeat.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) }),
                new WlMessage("deactivate", "o", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSeat.WlInterface) }),
                new WlMessage("show_input_panel", "", new WlInterface*[] { }),
                new WlMessage("hide_input_panel", "", new WlInterface*[] { }),
                new WlMessage("reset", "", new WlInterface*[] { }),
                new WlMessage("set_surrounding_text", "suu", new WlInterface*[] { null, null, null }),
                new WlMessage("set_content_type", "uu", new WlInterface*[] { null, null }),
                new WlMessage("set_cursor_rectangle", "iiii", new WlInterface*[] { null, null, null, null }),
                new WlMessage("set_preferred_language", "s", new WlInterface*[] { null }),
                new WlMessage("commit_state", "u", new WlInterface*[] { null }),
                new WlMessage("invoke_action", "uu", new WlInterface*[] { null, null })
            }, new WlMessage[] {
                new WlMessage("enter", "o", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) }),
                new WlMessage("leave", "", new WlInterface*[] { }),
                new WlMessage("modifiers_map", "a", new WlInterface*[] { null }),
                new WlMessage("input_panel_state", "u", new WlInterface*[] { null }),
                new WlMessage("preedit_string", "uss", new WlInterface*[] { null, null, null }),
                new WlMessage("preedit_styling", "uuu", new WlInterface*[] { null, null, null }),
                new WlMessage("preedit_cursor", "i", new WlInterface*[] { null }),
                new WlMessage("commit_string", "us", new WlInterface*[] { null, null }),
                new WlMessage("cursor_position", "ii", new WlInterface*[] { null, null }),
                new WlMessage("delete_surrounding_text", "iu", new WlInterface*[] { null, null }),
                new WlMessage("keysym", "uuuuu", new WlInterface*[] { null, null, null, null, null }),
                new WlMessage("language", "us", new WlInterface*[] { null, null }),
                new WlMessage("text_direction", "uu", new WlInterface*[] { null, null })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Text.WlTextInput.WlInterface);
        }

        /// <summary>
        /// Requests the text-input object to be activated (typically when thetext entry gets focus).The seat argument is a wl_seat which maintains the focus for thisactivation. The surface argument is a wl_surface assigned to thetext-input object and tracked for focus lost. The enter eventis emitted on successful activation.<br/><br/>
        /// </summary>
        public void Activate(NWayland.Protocols.Wayland.WlSeat @seat, NWayland.Protocols.Wayland.WlSurface @surface)
        {
            if (@surface == null)
                throw new ArgumentNullException("surface");
            if (@seat == null)
                throw new ArgumentNullException("seat");
            WlArgument* __args = stackalloc WlArgument[] {
                @seat,
                @surface
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        /// <summary>
        /// Requests the text-input object to be deactivated (typically when thetext entry lost focus). The seat argument is a wl_seat which was usedfor activation.<br/><br/>
        /// </summary>
        public void Deactivate(NWayland.Protocols.Wayland.WlSeat @seat)
        {
            if (@seat == null)
                throw new ArgumentNullException("seat");
            WlArgument* __args = stackalloc WlArgument[] {
                @seat
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
        }

        /// <summary>
        /// Requests input panels (virtual keyboard) to show.<br/><br/>
        /// </summary>
        public void ShowInputPanel()
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 2, __args);
        }

        /// <summary>
        /// Requests input panels (virtual keyboard) to hide.<br/><br/>
        /// </summary>
        public void HideInputPanel()
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 3, __args);
        }

        /// <summary>
        /// Should be called by an editor widget when the input state should bereset, for example after the text was changed outside of the normalinput method flow.<br/><br/>
        /// </summary>
        public void Reset()
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 4, __args);
        }

        /// <summary>
        /// Sets the plain surrounding text around the input position. Text isUTF-8 encoded. Cursor is the byte offset within thesurrounding text. Anchor is the byte offset of theselection anchor within the surrounding text. If there is no selectedtext anchor is the same as cursor.<br/><br/>
        /// </summary>
        public void SetSurroundingText(string @text, uint @cursor, uint @anchor)
        {
            if (@text == null)
                throw new ArgumentNullException("text");
            using var __marshalled__text = new NWaylandMarshalledString(@text);
            WlArgument* __args = stackalloc WlArgument[] {
                __marshalled__text,
                @cursor,
                @anchor
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 5, __args);
        }

        /// <summary>
        /// Sets the content purpose and content hint. While the purpose is thebasic purpose of an input field, the hint flags allow to modify someof the behavior.<br/><br/>
        /// When no content type is explicitly set, a normal content purpose withdefault hints (auto completion, auto correction, auto capitalization)should be assumed.<br/><br/>
        /// </summary>
        public void SetContentType(uint @hint, uint @purpose)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @hint,
                @purpose
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 6, __args);
        }

        public void SetCursorRectangle(int @x, int @y, int @width, int @height)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @x,
                @y,
                @width,
                @height
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 7, __args);
        }

        /// <summary>
        /// Sets a specific language. This allows for example a virtual keyboard toshow a language specific layout. The "language" argument is a RFC-3066format language tag.<br/><br/>
        /// It could be used for example in a word processor to indicate language ofcurrently edited document or in an instant message application which trackslanguages of contacts.<br/><br/>
        /// </summary>
        public void SetPreferredLanguage(string @language)
        {
            if (@language == null)
                throw new ArgumentNullException("language");
            using var __marshalled__language = new NWaylandMarshalledString(@language);
            WlArgument* __args = stackalloc WlArgument[] {
                __marshalled__language
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 8, __args);
        }

        public void CommitState(uint @serial)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @serial
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 9, __args);
        }

        public void InvokeAction(uint @button, uint @index)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @button,
                @index
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 10, __args);
        }

        public interface IEvents
        {
            /// <summary>
            /// Notify the text-input object when it received focus. Typically inresponse to an activate request.<br/><br/>
            /// </summary>
            void OnEnter(NWayland.Protocols.Plasma.Text.WlTextInput eventSender, NWayland.Protocols.Wayland.WlSurface @surface);

            /// <summary>
            /// Notify the text-input object when it lost focus. Either in responseto a deactivate request or when the assigned surface lost focus or wasdestroyed.<br/><br/>
            /// </summary>
            void OnLeave(NWayland.Protocols.Plasma.Text.WlTextInput eventSender);

            /// <summary>
            /// Transfer an array of 0-terminated modifiers names. The position inthe array is the index of the modifier as used in the modifiersbitmask in the keysym event.<br/><br/>
            /// </summary>
            void OnModifiersMap(NWayland.Protocols.Plasma.Text.WlTextInput eventSender, ReadOnlySpan<byte> @map);

            /// <summary>
            /// Notify when the visibility state of the input panel changed.<br/><br/>
            /// </summary>
            void OnInputPanelState(NWayland.Protocols.Plasma.Text.WlTextInput eventSender, uint @state);

            /// <summary>
            /// Notify when a new composing text (pre-edit) should be set around thecurrent cursor position. Any previously set composing text shouldbe removed.<br/><br/>
            /// The commit text can be used to replace the preedit text on reset(for example on unfocus).<br/><br/>
            /// The text input should also handle all preedit_style and preedit_cursorevents occurring directly before preedit_string.<br/><br/>
            /// </summary>
            void OnPreeditString(NWayland.Protocols.Plasma.Text.WlTextInput eventSender, uint @serial, string @text, string @commit);

            /// <summary>
            /// Sets styling information on composing text. The style is applied forlength bytes from index relative to the beginning of the composingtext (as byte offset). Multiple styles canbe applied to a composing text by sending multiple preedit_stylingevents.<br/><br/>
            /// This event is handled as part of a following preedit_string event.<br/><br/>
            /// </summary>
            void OnPreeditStyling(NWayland.Protocols.Plasma.Text.WlTextInput eventSender, uint @index, uint @length, uint @style);

            /// <summary>
            /// Sets the cursor position inside the composing text (as byteoffset) relative to the start of the composing text. When index is anegative number no cursor is shown.<br/><br/>
            /// This event is handled as part of a following preedit_string event.<br/><br/>
            /// </summary>
            void OnPreeditCursor(NWayland.Protocols.Plasma.Text.WlTextInput eventSender, int @index);

            /// <summary>
            /// Notify when text should be inserted into the editor widget. The text tocommit could be either just a single character after a key press or theresult of some composing (pre-edit). It could be also an empty textwhen some text should be removed (see delete_surrounding_text) or whenthe input cursor should be moved (see cursor_position).<br/><br/>
            /// Any previously set composing text should be removed.<br/><br/>
            /// </summary>
            void OnCommitString(NWayland.Protocols.Plasma.Text.WlTextInput eventSender, uint @serial, string @text);

            /// <summary>
            /// Notify when the cursor or anchor position should be modified.<br/><br/>
            /// This event should be handled as part of a following commit_stringevent.<br/><br/>
            /// </summary>
            void OnCursorPosition(NWayland.Protocols.Plasma.Text.WlTextInput eventSender, int @index, int @anchor);

            /// <summary>
            /// Notify when the text around the current cursor position should bedeleted.<br/><br/>
            /// Index is relative to the current cursor (in bytes).Length is the length of deleted text (in bytes).<br/><br/>
            /// This event should be handled as part of a following commit_stringevent.<br/><br/>
            /// </summary>
            void OnDeleteSurroundingText(NWayland.Protocols.Plasma.Text.WlTextInput eventSender, int @index, uint @length);

            /// <summary>
            /// Notify when a key event was sent. Key events should not be usedfor normal text input operations, which should be done withcommit_string, delete_surrounding_text, etc. The key event followsthe wl_keyboard key event convention. Sym is a XKB keysym, state awl_keyboard key_state. Modifiers are a mask for effective modifiers(where the modifier indices are set by the modifiers_map event)<br/><br/>
            /// </summary>
            void OnKeysym(NWayland.Protocols.Plasma.Text.WlTextInput eventSender, uint @serial, uint @time, uint @sym, uint @state, uint @modifiers);

            /// <summary>
            /// Sets the language of the input text. The "language" argument is a RFC-3066format language tag.<br/><br/>
            /// </summary>
            void OnLanguage(NWayland.Protocols.Plasma.Text.WlTextInput eventSender, uint @serial, string @language);

            /// <summary>
            /// Sets the text direction of input text.<br/><br/>
            /// It is mainly needed for showing input cursor on correct side of theeditor when there is no input yet done and making sure neutraldirection text is laid out properly.<br/><br/>
            /// </summary>
            void OnTextDirection(NWayland.Protocols.Plasma.Text.WlTextInput eventSender, uint @serial, uint @direction);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnEnter(this, WlProxy.FromNative<NWayland.Protocols.Wayland.WlSurface>(arguments[0].IntPtr));
                    break;
                case 1:
                    Events?.OnLeave(this);
                    break;
                case 2:
                    Events?.OnModifiersMap(this, WlArray.SpanFromWlArrayPtr<byte>(arguments[0].IntPtr));
                    break;
                case 3:
                    Events?.OnInputPanelState(this, arguments[0].UInt32);
                    break;
                case 4:
                    Events?.OnPreeditString(this, arguments[0].UInt32, Marshal.PtrToStringAnsi(arguments[1].IntPtr), Marshal.PtrToStringAnsi(arguments[2].IntPtr));
                    break;
                case 5:
                    Events?.OnPreeditStyling(this, arguments[0].UInt32, arguments[1].UInt32, arguments[2].UInt32);
                    break;
                case 6:
                    Events?.OnPreeditCursor(this, arguments[0].Int32);
                    break;
                case 7:
                    Events?.OnCommitString(this, arguments[0].UInt32, Marshal.PtrToStringAnsi(arguments[1].IntPtr));
                    break;
                case 8:
                    Events?.OnCursorPosition(this, arguments[0].Int32, arguments[1].Int32);
                    break;
                case 9:
                    Events?.OnDeleteSurroundingText(this, arguments[0].Int32, arguments[1].UInt32);
                    break;
                case 10:
                    Events?.OnKeysym(this, arguments[0].UInt32, arguments[1].UInt32, arguments[2].UInt32, arguments[3].UInt32, arguments[4].UInt32);
                    break;
                case 11:
                    Events?.OnLanguage(this, arguments[0].UInt32, Marshal.PtrToStringAnsi(arguments[1].IntPtr));
                    break;
                case 12:
                    Events?.OnTextDirection(this, arguments[0].UInt32, arguments[1].UInt32);
                    break;
            }
        }

        /// <summary>
        /// Content hint is a bitmask to allow to modify the behavior of the textinput.<br/><br/>
        /// </summary>
        public enum ContentHintEnum
        {
            /// <summary>
            /// no special behaviour<br/><br/>
            /// </summary>
            None = 0x0,
            /// <summary>
            /// auto completion, correction and capitalization<br/><br/>
            /// </summary>
            Default = 0x7,
            /// <summary>
            /// hidden and sensitive text<br/><br/>
            /// </summary>
            Password = 0xc0,
            /// <summary>
            /// suggest word completions<br/><br/>
            /// </summary>
            AutoCompletion = 0x1,
            /// <summary>
            /// suggest word corrections<br/><br/>
            /// </summary>
            AutoCorrection = 0x2,
            /// <summary>
            /// switch to uppercase letters at the start of a sentence<br/><br/>
            /// </summary>
            AutoCapitalization = 0x4,
            /// <summary>
            /// prefer lowercase letters<br/><br/>
            /// </summary>
            Lowercase = 0x8,
            /// <summary>
            /// prefer uppercase letters<br/><br/>
            /// </summary>
            Uppercase = 0x10,
            /// <summary>
            /// prefer casing for titles and headings (can be language dependent)<br/><br/>
            /// </summary>
            Titlecase = 0x20,
            /// <summary>
            /// characters should be hidden<br/><br/>
            /// </summary>
            HiddenText = 0x40,
            /// <summary>
            /// typed text should not be stored<br/><br/>
            /// </summary>
            SensitiveData = 0x80,
            /// <summary>
            /// just latin characters should be entered<br/><br/>
            /// </summary>
            Latin = 0x100,
            /// <summary>
            /// the text input is multiline<br/><br/>
            /// </summary>
            Multiline = 0x200
        }

        /// <summary>
        /// The content purpose allows to specify the primary purpose of a textinput.<br/><br/>
        /// This allows an input method to show special purpose input panels withextra characters or to disallow some characters.<br/><br/>
        /// </summary>
        public enum ContentPurposeEnum
        {
            /// <summary>
            /// default input, allowing all characters<br/><br/>
            /// </summary>
            Normal = 0,
            /// <summary>
            /// allow only alphabetic characters<br/><br/>
            /// </summary>
            Alpha = 1,
            /// <summary>
            /// allow only digits<br/><br/>
            /// </summary>
            Digits = 2,
            /// <summary>
            /// input a number (including decimal separator and sign)<br/><br/>
            /// </summary>
            Number = 3,
            /// <summary>
            /// input a phone number<br/><br/>
            /// </summary>
            Phone = 4,
            /// <summary>
            /// input an URL<br/><br/>
            /// </summary>
            Url = 5,
            /// <summary>
            /// input an email address<br/><br/>
            /// </summary>
            Email = 6,
            /// <summary>
            /// input a name of a person<br/><br/>
            /// </summary>
            Name = 7,
            /// <summary>
            /// input a password (combine with password or sensitive_data hint)<br/><br/>
            /// </summary>
            Password = 8,
            /// <summary>
            /// input a date<br/><br/>
            /// </summary>
            Date = 9,
            /// <summary>
            /// input a time<br/><br/>
            /// </summary>
            Time = 10,
            /// <summary>
            /// input a date and time<br/><br/>
            /// </summary>
            Datetime = 11,
            /// <summary>
            /// input for a terminal<br/><br/>
            /// </summary>
            Terminal = 12
        }

        public enum PreeditStyleEnum
        {
            /// <summary>
            /// default style for composing text<br/><br/>
            /// </summary>
            Default = 0,
            /// <summary>
            /// style should be the same as in non-composing text<br/><br/>
            /// </summary>
            None = 1,
            Active = 2,
            Inactive = 3,
            Highlight = 4,
            Underline = 5,
            Selection = 6,
            Incorrect = 7
        }

        public enum TextDirectionEnum
        {
            /// <summary>
            /// automatic text direction based on text and language<br/><br/>
            /// </summary>
            Auto = 0,
            /// <summary>
            /// left-to-right<br/><br/>
            /// </summary>
            Ltr = 1,
            /// <summary>
            /// right-to-left<br/><br/>
            /// </summary>
            Rtl = 2
        }

        private class ProxyFactory : IBindFactory<WlTextInput>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Text.WlTextInput.WlInterface);
            }

            public WlTextInput Create(IntPtr handle, int version)
            {
                return new WlTextInput(handle, version);
            }
        }

        public static IBindFactory<WlTextInput> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "wl_text_input";
        public const int InterfaceVersion = 1;

        public WlTextInput(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// A factory for text-input objects. This object is a global singleton.<br/><br/>
    /// </summary>
    public sealed unsafe partial class WlTextInputManager : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static WlTextInputManager()
        {
            NWayland.Protocols.Plasma.Text.WlTextInputManager.WlInterface = new WlInterface("wl_text_input_manager", 1, new WlMessage[] {
                new WlMessage("create_text_input", "n", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Text.WlTextInput.WlInterface) })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Text.WlTextInputManager.WlInterface);
        }

        /// <summary>
        /// Creates a new text-input object.<br/><br/>
        /// </summary>
        public NWayland.Protocols.Plasma.Text.WlTextInput CreateTextInput()
        {
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 0, __args, ref NWayland.Protocols.Plasma.Text.WlTextInput.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.Plasma.Text.WlTextInput(__ret, Version);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<WlTextInputManager>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Text.WlTextInputManager.WlInterface);
            }

            public WlTextInputManager Create(IntPtr handle, int version)
            {
                return new WlTextInputManager(handle, version);
            }
        }

        public static IBindFactory<WlTextInputManager> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "wl_text_input_manager";
        public const int InterfaceVersion = 1;

        public WlTextInputManager(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}