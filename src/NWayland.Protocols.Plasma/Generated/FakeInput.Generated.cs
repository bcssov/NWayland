using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.Plasma.FakeInput
{
    /// <summary>
    /// This interface allows other processes to provide fake input events.Purpose is on the one hand side to provide testing facilities like XTest on X11.But also to support use case like kdeconnect's mouse pad interface.<br/><br/>
    /// A compositor should not trust the input received from this interface.Clients should not expect that the compositor honors the requests from thisinterface.<br/><br/>
    /// </summary>
    public sealed unsafe partial class OrgKdeKwinFakeInput : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static OrgKdeKwinFakeInput()
        {
            NWayland.Protocols.Plasma.FakeInput.OrgKdeKwinFakeInput.WlInterface = new WlInterface("org_kde_kwin_fake_input", 4, new WlMessage[] {
                new WlMessage("authenticate", "ss", new WlInterface*[] { null, null }),
                new WlMessage("pointer_motion", "ff", new WlInterface*[] { null, null }),
                new WlMessage("button", "uu", new WlInterface*[] { null, null }),
                new WlMessage("axis", "uf", new WlInterface*[] { null, null }),
                new WlMessage("touch_down", "2uff", new WlInterface*[] { null, null, null }),
                new WlMessage("touch_motion", "2uff", new WlInterface*[] { null, null, null }),
                new WlMessage("touch_up", "2u", new WlInterface*[] { null }),
                new WlMessage("touch_cancel", "2", new WlInterface*[] { }),
                new WlMessage("touch_frame", "2", new WlInterface*[] { }),
                new WlMessage("pointer_motion_absolute", "3ff", new WlInterface*[] { null, null }),
                new WlMessage("keyboard_key", "4uu", new WlInterface*[] { null, null })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.FakeInput.OrgKdeKwinFakeInput.WlInterface);
        }

        /// <summary>
        /// A client should use this request to tell the compositor why it wants touse this interface. The compositor might use the information to decidewhether it wants to grant the request. The data might also be passed tothe user to decide whether the application should get granted access tothis very privileged interface.<br/><br/>
        /// </summary>
        public void Authenticate(string @application, string @reason)
        {
            if (@reason == null)
                throw new ArgumentNullException("reason");
            if (@application == null)
                throw new ArgumentNullException("application");
            using var __marshalled__application = new NWaylandMarshalledString(@application);
            using var __marshalled__reason = new NWaylandMarshalledString(@reason);
            WlArgument* __args = stackalloc WlArgument[] {
                __marshalled__application,
                __marshalled__reason
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        public void PointerMotion(WlFixed @deltaX, WlFixed @deltaY)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @deltaX,
                @deltaY
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
        }

        public void Button(uint @button, uint @state)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @button,
                @state
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 2, __args);
        }

        public void Axis(uint @axis, WlFixed @value)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @axis,
                @value
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 3, __args);
        }

        /// <summary>
        /// A client should use this request to send touch down event at specificcoordinates.<br/><br/>
        /// </summary>
        public void TouchDown(uint @id, WlFixed @x, WlFixed @y)
        {
            if (Version < 2)
                throw new InvalidOperationException("Request touch_down is only supported since version 2");
            WlArgument* __args = stackalloc WlArgument[] {
                @id,
                @x,
                @y
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 4, __args);
        }

        /// <summary>
        /// A client should use this request to send touch motion to specific position.<br/><br/>
        /// </summary>
        public void TouchMotion(uint @id, WlFixed @x, WlFixed @y)
        {
            if (Version < 2)
                throw new InvalidOperationException("Request touch_motion is only supported since version 2");
            WlArgument* __args = stackalloc WlArgument[] {
                @id,
                @x,
                @y
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 5, __args);
        }

        /// <summary>
        /// A client should use this request to send touch up event.<br/><br/>
        /// </summary>
        public void TouchUp(uint @id)
        {
            if (Version < 2)
                throw new InvalidOperationException("Request touch_up is only supported since version 2");
            WlArgument* __args = stackalloc WlArgument[] {
                @id
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 6, __args);
        }

        /// <summary>
        /// A client should use this request to cancel the currenttouch event.<br/><br/>
        /// </summary>
        public void TouchCancel()
        {
            if (Version < 2)
                throw new InvalidOperationException("Request touch_cancel is only supported since version 2");
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 7, __args);
        }

        /// <summary>
        /// A client should use this request to send touch frame event.<br/><br/>
        /// </summary>
        public void TouchFrame()
        {
            if (Version < 2)
                throw new InvalidOperationException("Request touch_frame is only supported since version 2");
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 8, __args);
        }

        public void PointerMotionAbsolute(WlFixed @x, WlFixed @y)
        {
            if (Version < 3)
                throw new InvalidOperationException("Request pointer_motion_absolute is only supported since version 3");
            WlArgument* __args = stackalloc WlArgument[] {
                @x,
                @y
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 9, __args);
        }

        public void KeyboardKey(uint @button, uint @state)
        {
            if (Version < 4)
                throw new InvalidOperationException("Request keyboard_key is only supported since version 4");
            WlArgument* __args = stackalloc WlArgument[] {
                @button,
                @state
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 10, __args);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<OrgKdeKwinFakeInput>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.FakeInput.OrgKdeKwinFakeInput.WlInterface);
            }

            public OrgKdeKwinFakeInput Create(IntPtr handle, int version)
            {
                return new OrgKdeKwinFakeInput(handle, version);
            }
        }

        public static IBindFactory<OrgKdeKwinFakeInput> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "org_kde_kwin_fake_input";
        public const int InterfaceVersion = 4;

        public OrgKdeKwinFakeInput(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}