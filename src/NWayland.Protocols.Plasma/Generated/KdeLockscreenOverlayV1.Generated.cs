using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.Plasma.KdeLockscreenOverlayV1
{
    /// <summary>
    /// Allows a client to request a surface to be visible when the system is locked.<br/><br/>
    /// This is meant to be used for specific high urgency cases like phone calls or alarms.<br/><br/>
    /// </summary>
    public sealed unsafe partial class KdeLockscreenOverlayV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static KdeLockscreenOverlayV1()
        {
            NWayland.Protocols.Plasma.KdeLockscreenOverlayV1.KdeLockscreenOverlayV1.WlInterface = new WlInterface("kde_lockscreen_overlay_v1", 1, new WlMessage[] {
                new WlMessage("allow", "o", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) }),
                new WlMessage("destroy", "", new WlInterface*[] { })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.KdeLockscreenOverlayV1.KdeLockscreenOverlayV1.WlInterface);
        }

        /// <summary>
        /// Informs the compositor that the surface could be shown when the screen is locked. This request should be called while the surface is unmapped.<br/><br/>
        /// </summary>
        public void Allow(NWayland.Protocols.Wayland.WlSurface @surface)
        {
            if (@surface == null)
                throw new ArgumentNullException("surface");
            WlArgument* __args = stackalloc WlArgument[] {
                @surface
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        public enum ErrorEnum
        {
            /// <summary>
            /// the client provided an invalid surface state<br/><br/>
            /// </summary>
            InvalidSurfaceState = 0
        }

        private class ProxyFactory : IBindFactory<KdeLockscreenOverlayV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.KdeLockscreenOverlayV1.KdeLockscreenOverlayV1.WlInterface);
            }

            public KdeLockscreenOverlayV1 Create(IntPtr handle, int version)
            {
                return new KdeLockscreenOverlayV1(handle, version);
            }
        }

        public static IBindFactory<KdeLockscreenOverlayV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "kde_lockscreen_overlay_v1";
        public const int InterfaceVersion = 1;

        public KdeLockscreenOverlayV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}