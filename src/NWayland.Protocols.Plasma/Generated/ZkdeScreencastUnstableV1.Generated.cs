using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1
{
    public sealed unsafe partial class ZkdeScreencastUnstableV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZkdeScreencastUnstableV1()
        {
            NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastUnstableV1.WlInterface = new WlInterface("zkde_screencast_unstable_v1", 3, new WlMessage[] {
                new WlMessage("stream_output", "nou", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlOutput.WlInterface), null }),
                new WlMessage("stream_window", "nsu", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1.WlInterface), null, null }),
                new WlMessage("destroy", "", new WlInterface*[] { }),
                new WlMessage("stream_virtual_output", "2nsiifu", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1.WlInterface), null, null, null, null, null }),
                new WlMessage("stream_region", "3niiuufu", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1.WlInterface), null, null, null, null, null, null })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastUnstableV1.WlInterface);
        }

        public NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1 StreamOutput(NWayland.Protocols.Wayland.WlOutput @output, uint @pointer)
        {
            if (@output == null)
                throw new ArgumentNullException("output");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @output,
                @pointer
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 0, __args, ref NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1(__ret, Version);
        }

        public NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1 StreamWindow(string @windowUuid, uint @pointer)
        {
            if (@windowUuid == null)
                throw new ArgumentNullException("windowUuid");
            using var __marshalled__windowUuid = new NWaylandMarshalledString(@windowUuid);
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                __marshalled__windowUuid,
                @pointer
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 1, __args, ref NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1(__ret, Version);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 2, __args);
            base.Dispose(true);
        }

        public NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1 StreamVirtualOutput(string @name, int @width, int @height, WlFixed @scale, uint @pointer)
        {
            if (@name == null)
                throw new ArgumentNullException("name");
            if (Version < 2)
                throw new InvalidOperationException("Request stream_virtual_output is only supported since version 2");
            using var __marshalled__name = new NWaylandMarshalledString(@name);
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                __marshalled__name,
                @width,
                @height,
                @scale,
                @pointer
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 3, __args, ref NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1(__ret, Version);
        }

        public NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1 StreamRegion(int @x, int @y, uint @width, uint @height, WlFixed @scale, uint @pointer)
        {
            if (Version < 3)
                throw new InvalidOperationException("Request stream_region is only supported since version 3");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @x,
                @y,
                @width,
                @height,
                @scale,
                @pointer
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 4, __args, ref NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1(__ret, Version);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        public enum PointerEnum
        {
            /// <summary>
            /// No cursor<br/><br/>
            /// </summary>
            Hidden = 1,
            /// <summary>
            /// Render the cursor on the stream<br/><br/>
            /// </summary>
            Embedded = 2,
            /// <summary>
            /// Send metadata about where the cursor is through PipeWire<br/><br/>
            /// </summary>
            Metadata = 4
        }

        private class ProxyFactory : IBindFactory<ZkdeScreencastUnstableV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastUnstableV1.WlInterface);
            }

            public ZkdeScreencastUnstableV1 Create(IntPtr handle, int version)
            {
                return new ZkdeScreencastUnstableV1(handle, version);
            }
        }

        public static IBindFactory<ZkdeScreencastUnstableV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zkde_screencast_unstable_v1";
        public const int InterfaceVersion = 3;

        public ZkdeScreencastUnstableV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    public sealed unsafe partial class ZkdeScreencastStreamUnstableV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZkdeScreencastStreamUnstableV1()
        {
            NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1.WlInterface = new WlInterface("zkde_screencast_stream_unstable_v1", 3, new WlMessage[] {
                new WlMessage("close", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("closed", "", new WlInterface*[] { }),
                new WlMessage("created", "u", new WlInterface*[] { null }),
                new WlMessage("failed", "s", new WlInterface*[] { null })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            void OnClosed(NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1 eventSender);
            void OnCreated(NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1 eventSender, uint @node);
            void OnFailed(NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1 eventSender, string @error);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnClosed(this);
                    break;
                case 1:
                    Events?.OnCreated(this, arguments[0].UInt32);
                    break;
                case 2:
                    Events?.OnFailed(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr));
                    break;
            }
        }

        private class ProxyFactory : IBindFactory<ZkdeScreencastStreamUnstableV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.ZkdeScreencastUnstableV1.ZkdeScreencastStreamUnstableV1.WlInterface);
            }

            public ZkdeScreencastStreamUnstableV1 Create(IntPtr handle, int version)
            {
                return new ZkdeScreencastStreamUnstableV1(handle, version);
            }
        }

        public static IBindFactory<ZkdeScreencastStreamUnstableV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zkde_screencast_stream_unstable_v1";
        public const int InterfaceVersion = 3;

        public ZkdeScreencastStreamUnstableV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}