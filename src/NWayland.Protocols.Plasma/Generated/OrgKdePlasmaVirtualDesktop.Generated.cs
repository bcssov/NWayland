using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop
{
    public sealed unsafe partial class OrgKdePlasmaVirtualDesktopManagement : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static OrgKdePlasmaVirtualDesktopManagement()
        {
            NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktopManagement.WlInterface = new WlInterface("org_kde_plasma_virtual_desktop_management", 2, new WlMessage[] {
                new WlMessage("get_virtual_desktop", "ns", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktop.WlInterface), null }),
                new WlMessage("request_create_virtual_desktop", "su", new WlInterface*[] { null, null }),
                new WlMessage("request_remove_virtual_desktop", "s", new WlInterface*[] { null })
            }, new WlMessage[] {
                new WlMessage("desktop_created", "su", new WlInterface*[] { null, null }),
                new WlMessage("desktop_removed", "s", new WlInterface*[] { null }),
                new WlMessage("done", "", new WlInterface*[] { }),
                new WlMessage("rows", "2u", new WlInterface*[] { null })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktopManagement.WlInterface);
        }

        /// <summary>
        /// Given the id of a particular virtual desktop, get the corresponding org_kde_plasma_virtual_desktop which represents only the desktop with that id.<br/><br/>
        /// </summary>
        public NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktop GetVirtualDesktop(string @desktopId)
        {
            if (@desktopId == null)
                throw new ArgumentNullException("desktopId");
            using var __marshalled__desktopId = new NWaylandMarshalledString(@desktopId);
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                __marshalled__desktopId
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 0, __args, ref NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktop.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktop(__ret, Version);
        }

        /// <summary>
        /// Ask the server to create a new virtual desktop, and position it at a specified position. If the position is zero or less, it will be positioned at the beginning, if the position is the count or more, it will be positioned at the end.<br/><br/>
        /// </summary>
        public void RequestCreateVirtualDesktop(string @name, uint @position)
        {
            if (@name == null)
                throw new ArgumentNullException("name");
            using var __marshalled__name = new NWaylandMarshalledString(@name);
            WlArgument* __args = stackalloc WlArgument[] {
                __marshalled__name,
                @position
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
        }

        /// <summary>
        /// Ask the server to get rid of a virtual desktop, the server may or may not acconsent to the request.<br/><br/>
        /// </summary>
        public void RequestRemoveVirtualDesktop(string @desktopId)
        {
            if (@desktopId == null)
                throw new ArgumentNullException("desktopId");
            using var __marshalled__desktopId = new NWaylandMarshalledString(@desktopId);
            WlArgument* __args = stackalloc WlArgument[] {
                __marshalled__desktopId
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 2, __args);
        }

        public interface IEvents
        {
            void OnDesktopCreated(NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktopManagement eventSender, string @desktopId, uint @position);
            void OnDesktopRemoved(NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktopManagement eventSender, string @desktopId);

            /// <summary>
            /// This event is sent after all other properties has beensent after binding to the desktop manager object and after anyother property changes done after that. This allowschanges to the org_kde_plasma_virtual_desktop_management properties to be seen asatomic, even if they happen via multiple events.<br/><br/>
            /// </summary>
            void OnDone(NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktopManagement eventSender);
            void OnRows(NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktopManagement eventSender, uint @rows);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnDesktopCreated(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr), arguments[1].UInt32);
                    break;
                case 1:
                    Events?.OnDesktopRemoved(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr));
                    break;
                case 2:
                    Events?.OnDone(this);
                    break;
                case 3:
                    Events?.OnRows(this, arguments[0].UInt32);
                    break;
            }
        }

        private class ProxyFactory : IBindFactory<OrgKdePlasmaVirtualDesktopManagement>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktopManagement.WlInterface);
            }

            public OrgKdePlasmaVirtualDesktopManagement Create(IntPtr handle, int version)
            {
                return new OrgKdePlasmaVirtualDesktopManagement(handle, version);
            }
        }

        public static IBindFactory<OrgKdePlasmaVirtualDesktopManagement> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "org_kde_plasma_virtual_desktop_management";
        public const int InterfaceVersion = 2;

        public OrgKdePlasmaVirtualDesktopManagement(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    public sealed unsafe partial class OrgKdePlasmaVirtualDesktop : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static OrgKdePlasmaVirtualDesktop()
        {
            NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktop.WlInterface = new WlInterface("org_kde_plasma_virtual_desktop", 1, new WlMessage[] {
                new WlMessage("request_activate", "", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("desktop_id", "s", new WlInterface*[] { null }),
                new WlMessage("name", "s", new WlInterface*[] { null }),
                new WlMessage("activated", "", new WlInterface*[] { }),
                new WlMessage("deactivated", "", new WlInterface*[] { }),
                new WlMessage("done", "", new WlInterface*[] { }),
                new WlMessage("removed", "", new WlInterface*[] { })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktop.WlInterface);
        }

        /// <summary>
        /// Request the server to set the status of this desktop to active: The server is free to consent or deny the request. This will be the new "current" virtual desktop of the system.<br/><br/>
        /// </summary>
        public void RequestActivate()
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        public interface IEvents
        {
            /// <summary>
            /// The format of the id is decided by the compositor implementation. A desktop id univocally identifies a virtual desktop and must be guaranteed to never exist two desktops with the same id. The format of the string id is up to the server implementation.<br/><br/>
            /// </summary>
            void OnDesktopId(NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktop eventSender, string @desktopId);
            void OnName(NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktop eventSender, string @name);

            /// <summary>
            /// The desktop will be the new "current" desktop of the system. The server may support either one virtual desktop active at a time, or other combinations such as one virtual desktop active per screen.Windows associated to this virtual desktop will be shown.<br/><br/>
            /// </summary>
            void OnActivated(NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktop eventSender);

            /// <summary>
            /// Windows that were associated only to this desktop will be hidden.<br/><br/>
            /// </summary>
            void OnDeactivated(NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktop eventSender);

            /// <summary>
            /// This event is sent after all other properties has beensent after binding to the desktop object and after anyother property changes done after that. This allowschanges to the org_kde_plasma_virtual_desktop properties to be seen asatomic, even if they happen via multiple events.<br/><br/>
            /// </summary>
            void OnDone(NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktop eventSender);

            /// <summary>
            /// This virtual desktop has just been removed by the server:All windows will lose the association to this desktop.<br/><br/>
            /// </summary>
            void OnRemoved(NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktop eventSender);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnDesktopId(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr));
                    break;
                case 1:
                    Events?.OnName(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr));
                    break;
                case 2:
                    Events?.OnActivated(this);
                    break;
                case 3:
                    Events?.OnDeactivated(this);
                    break;
                case 4:
                    Events?.OnDone(this);
                    break;
                case 5:
                    Events?.OnRemoved(this);
                    break;
            }
        }

        private class ProxyFactory : IBindFactory<OrgKdePlasmaVirtualDesktop>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.OrgKdePlasmaVirtualDesktop.OrgKdePlasmaVirtualDesktop.WlInterface);
            }

            public OrgKdePlasmaVirtualDesktop Create(IntPtr handle, int version)
            {
                return new OrgKdePlasmaVirtualDesktop(handle, version);
            }
        }

        public static IBindFactory<OrgKdePlasmaVirtualDesktop> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "org_kde_plasma_virtual_desktop";
        public const int InterfaceVersion = 1;

        public OrgKdePlasmaVirtualDesktop(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}