using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.Plasma.TextInputUnstableV2
{
    /// <summary>
    /// The zwp_text_input_v2 interface represents text input and input methodsassociated with a seat. It provides enter/leave events to follow thetext input focus for a seat.<br/><br/>
    /// Requests are used to enable/disable the text-input object and setstate information like surrounding and selected text or the content type.The information about the entered text is sent to the text-input objectvia the pre-edit and commit events. Using this interface removes the needfor applications to directly process hardware key events and compose textout of them.<br/><br/>
    /// Text is valid UTF-8 encoded, indices and lengths are in bytes. Indiceshave to always point to the first byte of an UTF-8 encoded code point.Lengths are not allowed to contain just a part of an UTF-8 encoded codepoint.<br/><br/>
    /// State is sent by the state requests (set_surrounding_text,set_content_type, set_cursor_rectangle and set_preferred_language) andan update_state request. After an enter or an input_method_change eventall state information is invalidated and needs to be resent from theclient. A reset or entering a new widget on client side alsoinvalidates all current state information.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwpTextInputV2 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpTextInputV2()
        {
            NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2.WlInterface = new WlInterface("zwp_text_input_v2", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { }),
                new WlMessage("enable", "o", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) }),
                new WlMessage("disable", "o", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) }),
                new WlMessage("show_input_panel", "", new WlInterface*[] { }),
                new WlMessage("hide_input_panel", "", new WlInterface*[] { }),
                new WlMessage("set_surrounding_text", "sii", new WlInterface*[] { null, null, null }),
                new WlMessage("set_content_type", "uu", new WlInterface*[] { null, null }),
                new WlMessage("set_cursor_rectangle", "iiii", new WlInterface*[] { null, null, null, null }),
                new WlMessage("set_preferred_language", "s", new WlInterface*[] { null }),
                new WlMessage("update_state", "uu", new WlInterface*[] { null, null })
            }, new WlMessage[] {
                new WlMessage("enter", "uo", new WlInterface*[] { null, WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) }),
                new WlMessage("leave", "uo", new WlInterface*[] { null, WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) }),
                new WlMessage("input_panel_state", "uiiii", new WlInterface*[] { null, null, null, null, null }),
                new WlMessage("preedit_string", "ss", new WlInterface*[] { null, null }),
                new WlMessage("preedit_styling", "uuu", new WlInterface*[] { null, null, null }),
                new WlMessage("preedit_cursor", "i", new WlInterface*[] { null }),
                new WlMessage("commit_string", "s", new WlInterface*[] { null }),
                new WlMessage("cursor_position", "ii", new WlInterface*[] { null, null }),
                new WlMessage("delete_surrounding_text", "uu", new WlInterface*[] { null, null }),
                new WlMessage("modifiers_map", "a", new WlInterface*[] { null }),
                new WlMessage("keysym", "uuuu", new WlInterface*[] { null, null, null, null }),
                new WlMessage("language", "s", new WlInterface*[] { null }),
                new WlMessage("text_direction", "u", new WlInterface*[] { null }),
                new WlMessage("configure_surrounding_text", "ii", new WlInterface*[] { null, null }),
                new WlMessage("input_method_changed", "uu", new WlInterface*[] { null, null })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        /// <summary>
        /// Enable text input in a surface (usually when a text entry inside of ithas focus).<br/><br/>
        /// This can be called before or after a surface gets text (or keyboard)focus via the enter event. Text input to a surface is only activewhen it has the current text (or keyboard) focus and is enabled.<br/><br/>
        /// </summary>
        public void Enable(NWayland.Protocols.Wayland.WlSurface @surface)
        {
            if (@surface == null)
                throw new ArgumentNullException("surface");
            WlArgument* __args = stackalloc WlArgument[] {
                @surface
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
        }

        /// <summary>
        /// Disable text input in a surface (typically when there is no focus on anytext entry inside the surface).<br/><br/>
        /// </summary>
        public void Disable(NWayland.Protocols.Wayland.WlSurface @surface)
        {
            if (@surface == null)
                throw new ArgumentNullException("surface");
            WlArgument* __args = stackalloc WlArgument[] {
                @surface
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 2, __args);
        }

        /// <summary>
        /// Requests input panels (virtual keyboard) to show.<br/><br/>
        /// This should be used for example to show a virtual keyboard again(with a tap) after it was closed by pressing on a close button on thekeyboard.<br/><br/>
        /// </summary>
        public void ShowInputPanel()
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 3, __args);
        }

        /// <summary>
        /// Requests input panels (virtual keyboard) to hide.<br/><br/>
        /// </summary>
        public void HideInputPanel()
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 4, __args);
        }

        /// <summary>
        /// Sets the plain surrounding text around the input position. Text isUTF-8 encoded. Cursor is the byte offset within the surrounding text.Anchor is the byte offset of the selection anchor within thesurrounding text. If there is no selected text, anchor is the same ascursor.<br/><br/>
        /// Make sure to always send some text before and after the cursorexcept when the cursor is at the beginning or end of text.<br/><br/>
        /// When there was a configure_surrounding_text event take thebefore_cursor and after_cursor arguments into account for picking howmuch surrounding text to send.<br/><br/>
        /// There is a maximum length of wayland messages so text can not belonger than 4000 bytes.<br/><br/>
        /// </summary>
        public void SetSurroundingText(string @text, int @cursor, int @anchor)
        {
            if (@text == null)
                throw new ArgumentNullException("text");
            using var __marshalled__text = new NWaylandMarshalledString(@text);
            WlArgument* __args = stackalloc WlArgument[] {
                __marshalled__text,
                @cursor,
                @anchor
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 5, __args);
        }

        /// <summary>
        /// Sets the content purpose and content hint. While the purpose is thebasic purpose of an input field, the hint flags allow to modify someof the behavior.<br/><br/>
        /// When no content type is explicitly set, a normal content purpose withnone hint should be assumed.<br/><br/>
        /// </summary>
        public void SetContentType(ContentHintEnum @hint, ContentPurposeEnum @purpose)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                (uint)@hint,
                (uint)@purpose
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 6, __args);
        }

        /// <summary>
        /// Sets the cursor outline as a x, y, width, height rectangle in surfacelocal coordinates.<br/><br/>
        /// Allows the compositor to put a window with word suggestions near thecursor.<br/><br/>
        /// </summary>
        public void SetCursorRectangle(int @x, int @y, int @width, int @height)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @x,
                @y,
                @width,
                @height
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 7, __args);
        }

        /// <summary>
        /// Sets a specific language. This allows for example a virtual keyboard toshow a language specific layout. The "language" argument is a RFC-3066format language tag.<br/><br/>
        /// It could be used for example in a word processor to indicate language ofcurrently edited document or in an instant message application whichtracks languages of contacts.<br/><br/>
        /// </summary>
        public void SetPreferredLanguage(string @language)
        {
            if (@language == null)
                throw new ArgumentNullException("language");
            using var __marshalled__language = new NWaylandMarshalledString(@language);
            WlArgument* __args = stackalloc WlArgument[] {
                __marshalled__language
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 8, __args);
        }

        /// <summary>
        /// Allows to atomically send state updates from client.<br/><br/>
        /// This request should follow after a batch of state updating requestslike set_surrounding_text, set_content_type, set_cursor_rectangle andset_preferred_language.<br/><br/>
        /// The flags field indicates why an updated state is sent to the inputmethod.<br/><br/>
        /// Reset should be used by an editor widget after the text was changedoutside of the normal input method flow.<br/><br/>
        /// For "change" it is enough to send the changed state, else the fullstate should be send.<br/><br/>
        /// Serial should be set to the serial from the last enter orinput_method_changed event.<br/><br/>
        /// To make sure to not receive outdated input method events after areset or switching to a new widget wl_display_sync() should be usedafter update_state in these cases.<br/><br/>
        /// </summary>
        public void UpdateState(uint @serial, UpdateStateEnum @reason)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @serial,
                (uint)@reason
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 9, __args);
        }

        public interface IEvents
        {
            /// <summary>
            /// Notification that this seat's text-input focus is on a certain surface.<br/><br/>
            /// When the seat has the keyboard capability the text-input focus followsthe keyboard focus.<br/><br/>
            /// </summary>
            void OnEnter(NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 eventSender, uint @serial, NWayland.Protocols.Wayland.WlSurface @surface);

            /// <summary>
            /// Notification that this seat's text-input focus is no longer ona certain surface.<br/><br/>
            /// The leave notification is sent before the enter notificationfor the new focus.<br/><br/>
            /// When the seat has the keyboard capability the text-input focus followsthe keyboard focus.<br/><br/>
            /// </summary>
            void OnLeave(NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 eventSender, uint @serial, NWayland.Protocols.Wayland.WlSurface @surface);

            /// <summary>
            /// Notification that the visibility of the input panel (virtual keyboard)changed.<br/><br/>
            /// The rectangle x, y, width, height defines the area overlapped by theinput panel (virtual keyboard) on the surface having the textfocus in surface local coordinates.<br/><br/>
            /// That can be used to make sure widgets are visible and not covered bya virtual keyboard.<br/><br/>
            /// </summary>
            void OnInputPanelState(NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 eventSender, InputPanelVisibilityEnum @state, int @x, int @y, int @width, int @height);

            /// <summary>
            /// Notify when a new composing text (pre-edit) should be set around thecurrent cursor position. Any previously set composing text shouldbe removed.<br/><br/>
            /// The commit text can be used to replace the composing text in some cases(for example when losing focus).<br/><br/>
            /// The text input should also handle all preedit_style and preedit_cursorevents occurring directly before preedit_string.<br/><br/>
            /// </summary>
            void OnPreeditString(NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 eventSender, string @text, string @commit);

            /// <summary>
            /// Sets styling information on composing text. The style is applied forlength bytes from index relative to the beginning of the composingtext (as byte offset). Multiple styles can be applied to a composingtext by sending multiple preedit_styling events.<br/><br/>
            /// This event is handled as part of a following preedit_string event.<br/><br/>
            /// </summary>
            void OnPreeditStyling(NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 eventSender, uint @index, uint @length, PreeditStyleEnum @style);

            /// <summary>
            /// Sets the cursor position inside the composing text (as byteoffset) relative to the start of the composing text. When index is anegative number no cursor is shown.<br/><br/>
            /// When no preedit_cursor event is sent the cursor will be at the end ofthe composing text by default.<br/><br/>
            /// This event is handled as part of a following preedit_string event.<br/><br/>
            /// </summary>
            void OnPreeditCursor(NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 eventSender, int @index);

            /// <summary>
            /// Notify when text should be inserted into the editor widget. The text tocommit could be either just a single character after a key press or theresult of some composing (pre-edit). It could be also an empty textwhen some text should be removed (see delete_surrounding_text) or whenthe input cursor should be moved (see cursor_position).<br/><br/>
            /// Any previously set composing text should be removed.<br/><br/>
            /// </summary>
            void OnCommitString(NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 eventSender, string @text);

            /// <summary>
            /// Notify when the cursor or anchor position should be modified.<br/><br/>
            /// This event should be handled as part of a following commit_stringevent.<br/><br/>
            /// The text between anchor and index should be selected.<br/><br/>
            /// </summary>
            void OnCursorPosition(NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 eventSender, int @index, int @anchor);

            /// <summary>
            /// Notify when the text around the current cursor position should bedeleted. BeforeLength and afterLength is the length (in bytes) of textbefore and after the current cursor position (excluding the selection)to delete.<br/><br/>
            /// This event should be handled as part of a following commit_stringor preedit_string event.<br/><br/>
            /// </summary>
            void OnDeleteSurroundingText(NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 eventSender, uint @beforeLength, uint @afterLength);

            /// <summary>
            /// Transfer an array of 0-terminated modifiers names. The position inthe array is the index of the modifier as used in the modifiersbitmask in the keysym event.<br/><br/>
            /// </summary>
            void OnModifiersMap(NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 eventSender, ReadOnlySpan<byte> @map);

            /// <summary>
            /// Notify when a key event was sent. Key events should not be usedfor normal text input operations, which should be done withcommit_string, delete_surrounding_text, etc. The key event followsthe wl_keyboard key event convention. Sym is a XKB keysym, state awl_keyboard key_state. Modifiers are a mask for effective modifiers(where the modifier indices are set by the modifiers_map event)<br/><br/>
            /// </summary>
            void OnKeysym(NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 eventSender, uint @time, uint @sym, uint @state, uint @modifiers);

            /// <summary>
            /// Sets the language of the input text. The "language" argument is a RFC-3066format language tag.<br/><br/>
            /// </summary>
            void OnLanguage(NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 eventSender, string @language);

            /// <summary>
            /// Sets the text direction of input text.<br/><br/>
            /// It is mainly needed for showing input cursor on correct side of theeditor when there is no input yet done and making sure neutraldirection text is laid out properly.<br/><br/>
            /// </summary>
            void OnTextDirection(NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 eventSender, TextDirectionEnum @direction);

            /// <summary>
            /// Configure what amount of surrounding text is expected by theinput method. The surrounding text will be sent in theset_surrounding_text request on the following state information updates.<br/><br/>
            /// </summary>
            void OnConfigureSurroundingText(NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 eventSender, int @beforeCursor, int @afterCursor);

            /// <summary>
            /// The input method changed on compositor side, which invalidates allcurrent state information. New state information should be sent fromthe client via state requests (set_surrounding_text,set_content_hint, ...) and update_state.<br/><br/>
            /// </summary>
            void OnInputMethodChanged(NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 eventSender, uint @serial, uint @flags);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnEnter(this, arguments[0].UInt32, WlProxy.FromNative<NWayland.Protocols.Wayland.WlSurface>(arguments[1].IntPtr));
                    break;
                case 1:
                    Events?.OnLeave(this, arguments[0].UInt32, WlProxy.FromNative<NWayland.Protocols.Wayland.WlSurface>(arguments[1].IntPtr));
                    break;
                case 2:
                    Events?.OnInputPanelState(this, (InputPanelVisibilityEnum)arguments[0].UInt32, arguments[1].Int32, arguments[2].Int32, arguments[3].Int32, arguments[4].Int32);
                    break;
                case 3:
                    Events?.OnPreeditString(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr), Marshal.PtrToStringAnsi(arguments[1].IntPtr));
                    break;
                case 4:
                    Events?.OnPreeditStyling(this, arguments[0].UInt32, arguments[1].UInt32, (PreeditStyleEnum)arguments[2].UInt32);
                    break;
                case 5:
                    Events?.OnPreeditCursor(this, arguments[0].Int32);
                    break;
                case 6:
                    Events?.OnCommitString(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr));
                    break;
                case 7:
                    Events?.OnCursorPosition(this, arguments[0].Int32, arguments[1].Int32);
                    break;
                case 8:
                    Events?.OnDeleteSurroundingText(this, arguments[0].UInt32, arguments[1].UInt32);
                    break;
                case 9:
                    Events?.OnModifiersMap(this, WlArray.SpanFromWlArrayPtr<byte>(arguments[0].IntPtr));
                    break;
                case 10:
                    Events?.OnKeysym(this, arguments[0].UInt32, arguments[1].UInt32, arguments[2].UInt32, arguments[3].UInt32);
                    break;
                case 11:
                    Events?.OnLanguage(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr));
                    break;
                case 12:
                    Events?.OnTextDirection(this, (TextDirectionEnum)arguments[0].UInt32);
                    break;
                case 13:
                    Events?.OnConfigureSurroundingText(this, arguments[0].Int32, arguments[1].Int32);
                    break;
                case 14:
                    Events?.OnInputMethodChanged(this, arguments[0].UInt32, arguments[1].UInt32);
                    break;
            }
        }

        /// <summary>
        /// Content hint is a bitmask to allow to modify the behavior of the textinput.<br/><br/>
        /// </summary>
        [Flags]
        public enum ContentHintEnum
        {
            /// <summary>
            /// no special behaviour<br/><br/>
            /// </summary>
            None = 0x0,
            /// <summary>
            /// suggest word completions<br/><br/>
            /// </summary>
            AutoCompletion = 0x1,
            /// <summary>
            /// suggest word corrections<br/><br/>
            /// </summary>
            AutoCorrection = 0x2,
            /// <summary>
            /// switch to uppercase letters at the start of a sentence<br/><br/>
            /// </summary>
            AutoCapitalization = 0x4,
            /// <summary>
            /// prefer lowercase letters<br/><br/>
            /// </summary>
            Lowercase = 0x8,
            /// <summary>
            /// prefer uppercase letters<br/><br/>
            /// </summary>
            Uppercase = 0x10,
            /// <summary>
            /// prefer casing for titles and headings (can be language dependent)<br/><br/>
            /// </summary>
            Titlecase = 0x20,
            /// <summary>
            /// characters should be hidden<br/><br/>
            /// </summary>
            HiddenText = 0x40,
            /// <summary>
            /// typed text should not be stored<br/><br/>
            /// </summary>
            SensitiveData = 0x80,
            /// <summary>
            /// just latin characters should be entered<br/><br/>
            /// </summary>
            Latin = 0x100,
            /// <summary>
            /// the text input is multiline<br/><br/>
            /// </summary>
            Multiline = 0x200
        }

        /// <summary>
        /// The content purpose allows to specify the primary purpose of a textinput.<br/><br/>
        /// This allows an input method to show special purpose input panels withextra characters or to disallow some characters.<br/><br/>
        /// </summary>
        public enum ContentPurposeEnum
        {
            /// <summary>
            /// default input, allowing all characters<br/><br/>
            /// </summary>
            Normal = 0,
            /// <summary>
            /// allow only alphabetic characters<br/><br/>
            /// </summary>
            Alpha = 1,
            /// <summary>
            /// allow only digits<br/><br/>
            /// </summary>
            Digits = 2,
            /// <summary>
            /// input a number (including decimal separator and sign)<br/><br/>
            /// </summary>
            Number = 3,
            /// <summary>
            /// input a phone number<br/><br/>
            /// </summary>
            Phone = 4,
            /// <summary>
            /// input an URL<br/><br/>
            /// </summary>
            Url = 5,
            /// <summary>
            /// input an email address<br/><br/>
            /// </summary>
            Email = 6,
            /// <summary>
            /// input a name of a person<br/><br/>
            /// </summary>
            Name = 7,
            /// <summary>
            /// input a password (combine with password or sensitive_data hint)<br/><br/>
            /// </summary>
            Password = 8,
            /// <summary>
            /// input a date<br/><br/>
            /// </summary>
            Date = 9,
            /// <summary>
            /// input a time<br/><br/>
            /// </summary>
            Time = 10,
            /// <summary>
            /// input a date and time<br/><br/>
            /// </summary>
            Datetime = 11,
            /// <summary>
            /// input for a terminal<br/><br/>
            /// </summary>
            Terminal = 12
        }

        /// <summary>
        /// Defines the reason for sending an updated state.<br/><br/>
        /// </summary>
        public enum UpdateStateEnum
        {
            /// <summary>
            /// updated state because it changed<br/><br/>
            /// </summary>
            Change = 0,
            /// <summary>
            /// full state after enter or input_method_changed event<br/><br/>
            /// </summary>
            Full = 1,
            /// <summary>
            /// full state after reset<br/><br/>
            /// </summary>
            Reset = 2,
            /// <summary>
            /// full state after switching focus to a different widget on client side<br/><br/>
            /// </summary>
            Enter = 3
        }

        public enum InputPanelVisibilityEnum
        {
            /// <summary>
            /// the input panel (virtual keyboard) is hidden<br/><br/>
            /// </summary>
            Hidden = 0,
            /// <summary>
            /// the input panel (virtual keyboard) is visible<br/><br/>
            /// </summary>
            Visible = 1
        }

        public enum PreeditStyleEnum
        {
            /// <summary>
            /// default style for composing text<br/><br/>
            /// </summary>
            Default = 0,
            /// <summary>
            /// composing text should be shown the same as non-composing text<br/><br/>
            /// </summary>
            None = 1,
            /// <summary>
            /// composing text might be bold<br/><br/>
            /// </summary>
            Active = 2,
            /// <summary>
            /// composing text might be cursive<br/><br/>
            /// </summary>
            Inactive = 3,
            /// <summary>
            /// composing text might have a different background color<br/><br/>
            /// </summary>
            Highlight = 4,
            /// <summary>
            /// composing text might be underlined<br/><br/>
            /// </summary>
            Underline = 5,
            /// <summary>
            /// composing text should be shown the same as selected text<br/><br/>
            /// </summary>
            Selection = 6,
            /// <summary>
            /// composing text might be underlined with a red wavy line<br/><br/>
            /// </summary>
            Incorrect = 7
        }

        public enum TextDirectionEnum
        {
            /// <summary>
            /// automatic text direction based on text and language<br/><br/>
            /// </summary>
            Auto = 0,
            /// <summary>
            /// left-to-right<br/><br/>
            /// </summary>
            Ltr = 1,
            /// <summary>
            /// right-to-left<br/><br/>
            /// </summary>
            Rtl = 2
        }

        private class ProxyFactory : IBindFactory<ZwpTextInputV2>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2.WlInterface);
            }

            public ZwpTextInputV2 Create(IntPtr handle, int version)
            {
                return new ZwpTextInputV2(handle, version);
            }
        }

        public static IBindFactory<ZwpTextInputV2> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_text_input_v2";
        public const int InterfaceVersion = 1;

        public ZwpTextInputV2(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// A factory for text-input objects. This object is a global singleton.<br/><br/>
    /// </summary>
    public sealed unsafe partial class ZwpTextInputManagerV2 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static ZwpTextInputManagerV2()
        {
            NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputManagerV2.WlInterface = new WlInterface("zwp_text_input_manager_v2", 1, new WlMessage[] {
                new WlMessage("destroy", "", new WlInterface*[] { }),
                new WlMessage("get_text_input", "no", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSeat.WlInterface) })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputManagerV2.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        /// <summary>
        /// Creates a new text-input object for a given seat.<br/><br/>
        /// </summary>
        public NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2 GetTextInput(NWayland.Protocols.Wayland.WlSeat @seat)
        {
            if (@seat == null)
                throw new ArgumentNullException("seat");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @seat
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 1, __args, ref NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputV2(__ret, Version);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<ZwpTextInputManagerV2>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.TextInputUnstableV2.ZwpTextInputManagerV2.WlInterface);
            }

            public ZwpTextInputManagerV2 Create(IntPtr handle, int version)
            {
                return new ZwpTextInputManagerV2(handle, version);
            }
        }

        public static IBindFactory<ZwpTextInputManagerV2> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "zwp_text_input_manager_v2";
        public const int InterfaceVersion = 1;

        public ZwpTextInputManagerV2(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}