using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.Plasma.Appmenu
{
    /// <summary>
    /// This interface allows a client to link a window (or wl_surface) to an com.canonical.dbusmenuinterface registered on DBus.<br/><br/>
    /// </summary>
    public sealed unsafe partial class OrgKdeKwinAppmenuManager : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static OrgKdeKwinAppmenuManager()
        {
            NWayland.Protocols.Plasma.Appmenu.OrgKdeKwinAppmenuManager.WlInterface = new WlInterface("org_kde_kwin_appmenu_manager", 1, new WlMessage[] {
                new WlMessage("create", "no", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Appmenu.OrgKdeKwinAppmenu.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Appmenu.OrgKdeKwinAppmenuManager.WlInterface);
        }

        public NWayland.Protocols.Plasma.Appmenu.OrgKdeKwinAppmenu Create(NWayland.Protocols.Wayland.WlSurface @surface)
        {
            if (@surface == null)
                throw new ArgumentNullException("surface");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @surface
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 0, __args, ref NWayland.Protocols.Plasma.Appmenu.OrgKdeKwinAppmenu.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.Plasma.Appmenu.OrgKdeKwinAppmenu(__ret, Version);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<OrgKdeKwinAppmenuManager>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Appmenu.OrgKdeKwinAppmenuManager.WlInterface);
            }

            public OrgKdeKwinAppmenuManager Create(IntPtr handle, int version)
            {
                return new OrgKdeKwinAppmenuManager(handle, version);
            }
        }

        public static IBindFactory<OrgKdeKwinAppmenuManager> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "org_kde_kwin_appmenu_manager";
        public const int InterfaceVersion = 1;

        public OrgKdeKwinAppmenuManager(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// The DBus service name and object path where the appmenu interface is presentThe object should be registered on the session bus before sending this request.If not applicable, clients should remove this object.<br/><br/>
    /// </summary>
    public sealed unsafe partial class OrgKdeKwinAppmenu : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static OrgKdeKwinAppmenu()
        {
            NWayland.Protocols.Plasma.Appmenu.OrgKdeKwinAppmenu.WlInterface = new WlInterface("org_kde_kwin_appmenu", 1, new WlMessage[] {
                new WlMessage("set_address", "ss", new WlInterface*[] { null, null }),
                new WlMessage("release", "", new WlInterface*[] { })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Appmenu.OrgKdeKwinAppmenu.WlInterface);
        }

        /// <summary>
        /// Set or update the service name and object path.Strings should be formatted in Latin-1 matching the relevant DBus specifications.<br/><br/>
        /// </summary>
        public void SetAddress(string @serviceName, string @objectPath)
        {
            if (@objectPath == null)
                throw new ArgumentNullException("objectPath");
            if (@serviceName == null)
                throw new ArgumentNullException("serviceName");
            using var __marshalled__serviceName = new NWaylandMarshalledString(@serviceName);
            using var __marshalled__objectPath = new NWaylandMarshalledString(@objectPath);
            WlArgument* __args = stackalloc WlArgument[] {
                __marshalled__serviceName,
                __marshalled__objectPath
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<OrgKdeKwinAppmenu>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Appmenu.OrgKdeKwinAppmenu.WlInterface);
            }

            public OrgKdeKwinAppmenu Create(IntPtr handle, int version)
            {
                return new OrgKdeKwinAppmenu(handle, version);
            }
        }

        public static IBindFactory<OrgKdeKwinAppmenu> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "org_kde_kwin_appmenu";
        public const int InterfaceVersion = 1;

        public OrgKdeKwinAppmenu(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}