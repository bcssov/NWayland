using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.Plasma.KdePrimaryOutputV1
{
    /// <summary>
    /// Protocol for telling which is the primary display among the selection of enabled outputs.<br/><br/>
    /// </summary>
    public sealed unsafe partial class KdePrimaryOutputV1 : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static KdePrimaryOutputV1()
        {
            NWayland.Protocols.Plasma.KdePrimaryOutputV1.KdePrimaryOutputV1.WlInterface = new WlInterface("kde_primary_output_v1", 2, new WlMessage[] {
                new WlMessage("destroy", "2", new WlInterface*[] { })
            }, new WlMessage[] {
                new WlMessage("primary_output", "s", new WlInterface*[] { null })
            });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.KdePrimaryOutputV1.KdePrimaryOutputV1.WlInterface);
        }

        protected override void Dispose(bool disposing)
        {
            if (Version < 2)
                return;
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
            /// <summary>
            /// Specifies which output is the primary one identified by their uuid. See kde_output_device_v2 uuid event for more information about it.<br/><br/>
            /// </summary>
            void OnPrimaryOutput(NWayland.Protocols.Plasma.KdePrimaryOutputV1.KdePrimaryOutputV1 eventSender, string @outputName);
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
            switch (opcode)
            {
                case 0:
                    Events?.OnPrimaryOutput(this, Marshal.PtrToStringAnsi(arguments[0].IntPtr));
                    break;
            }
        }

        private class ProxyFactory : IBindFactory<KdePrimaryOutputV1>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.KdePrimaryOutputV1.KdePrimaryOutputV1.WlInterface);
            }

            public KdePrimaryOutputV1 Create(IntPtr handle, int version)
            {
                return new KdePrimaryOutputV1(handle, version);
            }
        }

        public static IBindFactory<KdePrimaryOutputV1> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "kde_primary_output_v1";
        public const int InterfaceVersion = 2;

        public KdePrimaryOutputV1(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}