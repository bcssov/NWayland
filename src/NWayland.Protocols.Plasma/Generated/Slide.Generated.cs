using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.Plasma.Slide
{
    public sealed unsafe partial class OrgKdeKwinSlideManager : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static OrgKdeKwinSlideManager()
        {
            NWayland.Protocols.Plasma.Slide.OrgKdeKwinSlideManager.WlInterface = new WlInterface("org_kde_kwin_slide_manager", 1, new WlMessage[] {
                new WlMessage("create", "no", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Slide.OrgKdeKwinSlide.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) }),
                new WlMessage("unset", "o", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Slide.OrgKdeKwinSlideManager.WlInterface);
        }

        public NWayland.Protocols.Plasma.Slide.OrgKdeKwinSlide Create(NWayland.Protocols.Wayland.WlSurface @surface)
        {
            if (@surface == null)
                throw new ArgumentNullException("surface");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @surface
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 0, __args, ref NWayland.Protocols.Plasma.Slide.OrgKdeKwinSlide.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.Plasma.Slide.OrgKdeKwinSlide(__ret, Version);
        }

        public void Unset(NWayland.Protocols.Wayland.WlSurface @surface)
        {
            if (@surface == null)
                throw new ArgumentNullException("surface");
            WlArgument* __args = stackalloc WlArgument[] {
                @surface
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<OrgKdeKwinSlideManager>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Slide.OrgKdeKwinSlideManager.WlInterface);
            }

            public OrgKdeKwinSlideManager Create(IntPtr handle, int version)
            {
                return new OrgKdeKwinSlideManager(handle, version);
            }
        }

        public static IBindFactory<OrgKdeKwinSlideManager> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "org_kde_kwin_slide_manager";
        public const int InterfaceVersion = 1;

        public OrgKdeKwinSlideManager(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    /// <summary>
    /// Ask the compositor to move the surface from a location to anotherwith a slide animation.<br/><br/>
    /// The from argument provides a clue about where the slide animationbegins, offset is the distance from screen edge to begin the animation.<br/><br/>
    /// </summary>
    public sealed unsafe partial class OrgKdeKwinSlide : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static OrgKdeKwinSlide()
        {
            NWayland.Protocols.Plasma.Slide.OrgKdeKwinSlide.WlInterface = new WlInterface("org_kde_kwin_slide", 1, new WlMessage[] {
                new WlMessage("commit", "", new WlInterface*[] { }),
                new WlMessage("set_location", "u", new WlInterface*[] { null }),
                new WlMessage("set_offset", "i", new WlInterface*[] { null }),
                new WlMessage("release", "", new WlInterface*[] { })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Slide.OrgKdeKwinSlide.WlInterface);
        }

        public void Commit()
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        public void SetLocation(uint @location)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @location
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
        }

        public void SetOffset(int @offset)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @offset
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 2, __args);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 3, __args);
            base.Dispose(true);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        public enum LocationEnum
        {
            Left = 0,
            Top = 1,
            Right = 2,
            Bottom = 3
        }

        private class ProxyFactory : IBindFactory<OrgKdeKwinSlide>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Slide.OrgKdeKwinSlide.WlInterface);
            }

            public OrgKdeKwinSlide Create(IntPtr handle, int version)
            {
                return new OrgKdeKwinSlide(handle, version);
            }
        }

        public static IBindFactory<OrgKdeKwinSlide> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "org_kde_kwin_slide";
        public const int InterfaceVersion = 1;

        public OrgKdeKwinSlide(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}