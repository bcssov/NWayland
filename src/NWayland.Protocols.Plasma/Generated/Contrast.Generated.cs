using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NWayland.Protocols.Wayland;
using NWayland.Interop;
#nullable enable
// <auto-generated/>
namespace NWayland.Protocols.Plasma.Contrast
{
    public sealed unsafe partial class OrgKdeKwinContrastManager : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static OrgKdeKwinContrastManager()
        {
            NWayland.Protocols.Plasma.Contrast.OrgKdeKwinContrastManager.WlInterface = new WlInterface("org_kde_kwin_contrast_manager", 2, new WlMessage[] {
                new WlMessage("create", "no", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Contrast.OrgKdeKwinContrast.WlInterface), WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) }),
                new WlMessage("unset", "o", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlSurface.WlInterface) })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Contrast.OrgKdeKwinContrastManager.WlInterface);
        }

        public NWayland.Protocols.Plasma.Contrast.OrgKdeKwinContrast Create(NWayland.Protocols.Wayland.WlSurface @surface)
        {
            if (@surface == null)
                throw new ArgumentNullException("surface");
            WlArgument* __args = stackalloc WlArgument[] {
                WlArgument.NewId,
                @surface
            };
            var __ret = LibWayland.wl_proxy_marshal_array_constructor_versioned(this.Handle, 0, __args, ref NWayland.Protocols.Plasma.Contrast.OrgKdeKwinContrast.WlInterface, (uint)this.Version);
            return __ret == IntPtr.Zero ? null : new NWayland.Protocols.Plasma.Contrast.OrgKdeKwinContrast(__ret, Version);
        }

        public void Unset(NWayland.Protocols.Wayland.WlSurface @surface)
        {
            if (@surface == null)
                throw new ArgumentNullException("surface");
            WlArgument* __args = stackalloc WlArgument[] {
                @surface
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<OrgKdeKwinContrastManager>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Contrast.OrgKdeKwinContrastManager.WlInterface);
            }

            public OrgKdeKwinContrastManager Create(IntPtr handle, int version)
            {
                return new OrgKdeKwinContrastManager(handle, version);
            }
        }

        public static IBindFactory<OrgKdeKwinContrastManager> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "org_kde_kwin_contrast_manager";
        public const int InterfaceVersion = 2;

        public OrgKdeKwinContrastManager(IntPtr handle, int version) : base(handle, version)
        {
        }
    }

    public sealed unsafe partial class OrgKdeKwinContrast : WlProxy
    {
        [FixedAddressValueType]
        public static WlInterface WlInterface;

        static OrgKdeKwinContrast()
        {
            NWayland.Protocols.Plasma.Contrast.OrgKdeKwinContrast.WlInterface = new WlInterface("org_kde_kwin_contrast", 2, new WlMessage[] {
                new WlMessage("commit", "", new WlInterface*[] { }),
                new WlMessage("set_region", "?o", new WlInterface*[] { WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Wayland.WlRegion.WlInterface) }),
                new WlMessage("set_contrast", "f", new WlInterface*[] { null }),
                new WlMessage("set_intensity", "f", new WlInterface*[] { null }),
                new WlMessage("set_saturation", "f", new WlInterface*[] { null }),
                new WlMessage("release", "", new WlInterface*[] { }),
                new WlMessage("set_frost", "2iiii", new WlInterface*[] { null, null, null, null }),
                new WlMessage("unset_frost", "2", new WlInterface*[] { })
            }, new WlMessage[] { });
        }

        protected override WlInterface* GetWlInterface()
        {
            return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Contrast.OrgKdeKwinContrast.WlInterface);
        }

        public void Commit()
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 0, __args);
        }

        public void SetRegion(NWayland.Protocols.Wayland.WlRegion? @region)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @region
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 1, __args);
        }

        public void SetContrast(WlFixed @contrast)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @contrast
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 2, __args);
        }

        public void SetIntensity(WlFixed @intensity)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @intensity
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 3, __args);
        }

        public void SetSaturation(WlFixed @saturation)
        {
            WlArgument* __args = stackalloc WlArgument[] {
                @saturation
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 4, __args);
        }

        protected override void Dispose(bool disposing)
        {
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 5, __args);
            base.Dispose(true);
        }

        /// <summary>
        /// enables 'frost' variant of contrast effect.<br/><br/>
        /// 'frost' is an enhanced version of the contrast effect thatuses different colour arithmetic to get backgrounds simultaneouslyhigher in contrast and (apparent) transparency.<br/><br/>
        /// r, g, b, a are channels from 0-255, indicating a colour to use in contrast calculation.should be based off of the "main" background colour of the surface.<br/><br/>
        /// </summary>
        public void SetFrost(int @red, int @green, int @blue, int @alpha)
        {
            if (Version < 2)
                throw new InvalidOperationException("Request set_frost is only supported since version 2");
            WlArgument* __args = stackalloc WlArgument[] {
                @red,
                @green,
                @blue,
                @alpha
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 6, __args);
        }

        public void UnsetFrost()
        {
            if (Version < 2)
                throw new InvalidOperationException("Request unset_frost is only supported since version 2");
            WlArgument* __args = stackalloc WlArgument[] {
            };
            LibWayland.wl_proxy_marshal_array(this.Handle, 7, __args);
        }

        public interface IEvents
        {
        }

        public IEvents? Events { get; set; }

        protected override void DispatchEvent(uint opcode, WlArgument* arguments)
        {
        }

        private class ProxyFactory : IBindFactory<OrgKdeKwinContrast>
        {
            public WlInterface* GetInterface()
            {
                return WlInterface.GeneratorAddressOf(ref NWayland.Protocols.Plasma.Contrast.OrgKdeKwinContrast.WlInterface);
            }

            public OrgKdeKwinContrast Create(IntPtr handle, int version)
            {
                return new OrgKdeKwinContrast(handle, version);
            }
        }

        public static IBindFactory<OrgKdeKwinContrast> BindFactory { get; } = new ProxyFactory();

        public const string InterfaceName = "org_kde_kwin_contrast";
        public const int InterfaceVersion = 2;

        public OrgKdeKwinContrast(IntPtr handle, int version) : base(handle, version)
        {
        }
    }
}